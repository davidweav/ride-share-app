package edu.uga.cs.rideshareapp.firebase;

import androidx.annotation.NonNull; // Import if using listeners

import com.google.android.gms.tasks.OnFailureListener; // Import for error handling
import com.google.android.gms.tasks.OnSuccessListener; // Import for success handling
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;

import edu.uga.cs.rideshareapp.model.Ride; // Import your Ride class
import android.util.Log; // For logging

public class RideService {

    private final DatabaseReference ridesRef;
    private static final String TAG = "RideService"; // Tag for logging

    public RideService() {
        // Initialize Firebase Realtime Database
        FirebaseDatabase database = FirebaseDatabase.getInstance();
        // Make ridesRef an instance variable
        ridesRef = database.getReference("rides");
    }

    /**
     * Creates a new ride entry in the Firebase Realtime Database.
     * Firebase generates a unique key for the new ride.
     *
     * @param ride The Ride object containing the data for the new ride.
     */
    public void createNewRide(Ride ride) {
        if (ride == null) {
            Log.e(TAG, "Cannot create a null ride.");
            return;
        }

        // Use push() to generate a unique key for the new ride
        DatabaseReference newRideRef = ridesRef.push();

        // Get the unique key generated by push() - useful if you want to store it
        String rideKey = newRideRef.getKey();
        if (rideKey != null) {
            ride.setRideId(rideKey); // Optional: store the key within the Ride object itself
        }

        // Set the value of the new ride using the Ride object
        // Firebase automatically maps the Ride object fields to JSON data
        newRideRef.setValue(ride)
                .addOnSuccessListener(new OnSuccessListener<Void>() {
                    @Override
                    public void onSuccess(Void aVoid) {
                        // Write was successful!
                        Log.d(TAG, "New ride created successfully with key: " + rideKey);
                    }
                })
                .addOnFailureListener(new OnFailureListener() {
                    @Override
                    public void onFailure(@NonNull Exception e) {
                        // Write failed
                        Log.e(TAG, "Error creating new ride", e);
                    }
                });
    }

    public boolean createNewRideWithStrings(String dateTime, String user, boolean isDriver, String from, String to) {
        if (dateTime == null || user == null || from == null || to == null) {
            Log.e(TAG, "Cannot create a null ride.");
            return false;
        }

        boolean rideCreated = False;
        Ride ride;
        try:
            // Use push() to generate a unique key for the new ride
            DatabaseReference newRideRef = ridesRef.push();

            // Get the unique key generated by push() - useful if you want to store it
            String rideKey = newRideRef.getKey();
            if (rideKey != null) {
                ride.setRideId(rideKey); // Optional: store the key within the Ride object itself
            }

            if (isDriver) {
                ride = new Ride(dateTime, user, "", from, to, false, "");
            }
            else {
                ride = new Ride(dateTime, "", user, from, to, false, "");
            }
            createNewRide(ride);
            rideCreated = True;
        }
        catch (Exception e) {
            Log.e(TAG, "Error creating new ride", e);
            rideCreated = False;
        }
        return rideCreated;~


    }

}